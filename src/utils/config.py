"""
Configura√ß√µes do bot.
"""
import os
from dotenv import load_dotenv
from typing import Optional, List
import logging

logger = logging.getLogger(__name__)

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

class Config:
    """Classe para gerenciar configura√ß√µes do bot."""
    
    @staticmethod
    def get_env(key: str, default: Optional[str] = None) -> str:
        """
        Obt√©m uma vari√°vel de ambiente.
        
        Args:
            key (str): Nome da vari√°vel de ambiente.
            default (Optional[str]): Valor padr√£o caso a vari√°vel n√£o esteja definida.
            
        Returns:
            str: Valor da vari√°vel de ambiente ou o valor padr√£o.
        """
        value = os.getenv(key, default)
        if value is None:
            logger.warning(f"Vari√°vel de ambiente {key} n√£o encontrada. Usando valor padr√£o: {default}")
            return default or ""
        return value
    
    @staticmethod
    def get_token() -> str:
        """
        Obt√©m o token da API do Telegram.
        
        Returns:
            str: Token da API do Telegram.
            
        Raises:
            ValueError: Se o token n√£o estiver definido.
        """
        token = os.getenv("TELEGRAM_API_TOKEN")
        if not token:
            logger.error("Token da API do Telegram n√£o encontrado. Configure a vari√°vel de ambiente TELEGRAM_API_TOKEN.")
            raise ValueError("Token da API do Telegram n√£o encontrado")
        return token
    
    @staticmethod
    def get_owner_id() -> int:
        """
        Obt√©m o ID do propriet√°rio do bot.
        
        Returns:
            int: ID do propriet√°rio do bot.
            
        Raises:
            ValueError: Se o ID do propriet√°rio n√£o estiver definido.
        """
        owner_id = os.getenv("OWNER_ID")
        if not owner_id:
            logger.error("ID do propriet√°rio n√£o encontrado. Configure a vari√°vel de ambiente OWNER_ID.")
            raise ValueError("ID do propriet√°rio n√£o encontrado")
        try:
            return int(owner_id)
        except ValueError:
            logger.error("ID do propriet√°rio inv√°lido. Deve ser um n√∫mero inteiro.")
            raise ValueError("ID do propriet√°rio inv√°lido")
    
    @staticmethod
    def get_bot_username() -> str:
        """
        Obt√©m o nome de usu√°rio do bot.
        
        Returns:
            str: Nome de usu√°rio do bot sem o s√≠mbolo @.
        """
        username = os.getenv("BOT_USERNAME", "Nations_bro_bot")
        # Remove o s√≠mbolo @ se estiver presente
        if username.startswith("@"):
            username = username[1:]
        return username
    
    @staticmethod
    def get_log_level() -> str:
        """
        Obt√©m o n√≠vel de log.
        
        Returns:
            str: N√≠vel de log (DEBUG, INFO, WARNING, ERROR, CRITICAL).
        """
        return os.getenv("LOG_LEVEL", "INFO")
    
    @staticmethod
    def get_welcome_message() -> str:
        """
        Obt√©m a mensagem de boas-vindas personalizada ou usa a padr√£o.
        
        Returns:
            str: Mensagem de boas-vindas.
        """
        default_message = (
            "Bem-vindo(a) ao GYM NATION! üí™\n\n"
            "Aqui compartilhamos dicas de treino, nutri√ß√£o e motiva√ß√£o. "
            "Sinta-se √† vontade para fazer perguntas e compartilhar sua jornada fitness com a nossa comunidade!"
        )
        return os.getenv("WELCOME_MESSAGE", default_message)
    
    @staticmethod
    def get_anthropic_api_key() -> str:
        """
        Obt√©m a chave da API da Anthropic.
        
        Returns:
            str: Chave da API da Anthropic.
            
        Raises:
            ValueError: Se a chave n√£o estiver definida.
        """
        api_key = os.getenv("ANTHROPIC_API_KEY")
        if not api_key:
            raise ValueError(
                "Chave da API da Anthropic n√£o encontrada. "
                "Defina a vari√°vel de ambiente ANTHROPIC_API_KEY."
            )
        return api_key
    
    @staticmethod
    def get_presentation_prompt() -> str:
        """
        Obt√©m o prompt para a apresenta√ß√£o.
        
        Returns:
            str: Prompt para a apresenta√ß√£o.
        """
        default_prompt = (
            "Gere uma resposta curta e concisa (m√°ximo de 3 frases), atuando como um membro marombeiro aut√™ntico, experiente e acolhedor do grupo (GYM NATION) GN no Telegram. "
            "Ao receber a mensagem de apresenta√ß√£o abaixo, elabore uma resposta calorosa, original e muito concisa, que:\n"
            "- Seja breve e direta (m√°ximo de 3 frases);\n"
            "- Apresente um elogio sincero fundamentado na mensagem apresentada;\n"
            "- Destaque o GN como uma comunidade de apoio real;\n"
            "- Evite clich√™s, jarg√µes motivacionais e termos gen√©ricos (como \"jornada\");\n"
            "- Utilize uma linguagem natural, aut√™ntica e com um toque de humor refinado e sutil, √† la Rick Gervais ou John Cleese;\n"
            "- Inclua um emoji fitness relevante (üí™, üèãÔ∏è, üî•, etc.).\n\n"
            "Mensagem de apresenta√ß√£o: {{mensagem_de_apresentacao_membro}}"
        )
        return os.getenv("PRESENTATION_PROMPT", default_prompt)
        
    @staticmethod
    def get_motivation_prompt() -> str:
        """
        Obt√©m o prompt para gerar mensagens de motiva√ß√£o fitness.
        
        Returns:
            str: Prompt para mensagens de motiva√ß√£o.
        """
        default_prompt = (
            """Crie uma √∫nica frase motivacional e impactante sobre fitness, muscula√ß√£o ou vida saud√°vel para o grupo (GYM NATION) GN no Telegram. 
A frase deve:
- Come√ßar com um emoji fitness relevante (üí™, üèãÔ∏è, üî•, ‚ö°, üíØ, üèÜ, üöÄ, etc.);
- Ser concisa (m√°ximo de 100 caracteres);
- Ser original e evitar clich√™s comuns;
- Ter um tom motivador, mas com um toque sarc√°stico, seu humor √© sarc√°stico escrachado;
- Ocasionalmente mencionar 'GN' para refor√ßar a identidade do grupo, mas n√£o √© obrigat√≥rio na sua resposta;
- Ser escrita em portugu√™s brasileiro.
- Tenha um tom de voz descontra√≠do, informal e com um toque de humor, √† la Rick Gervais ou John Cleese, pode fazer provoca√ß√µes e gracinhas se necess√°rio.

Retorne APENAS a frase motivacional, sem introdu√ß√µes ou explica√ß√µes."""
        )
        return os.getenv("MOTIVATION_PROMPT", default_prompt)
    
    @staticmethod
    def get_fecho_prompt() -> str:
        """
        Obt√©m o prompt para gerar tiradas sarc√°sticas e debochadas.
        
        Returns:
            str: Prompt para tiradas sarc√°sticas.
        """
        default_prompt = (
            """Crie uma √∫nica tirada sarc√°stica e debochada com humor para responder uma pessoa no Telegram.
A tirada deve:
- Ser concisa (m√°ximo de 100 caracteres);
- Ser original e engra√ßada;
- Ter um tom sarc√°stico e debochado;
- Ser escrita em portugu√™s brasileiro;
- Ter um tom de voz descontra√≠do e informal, como um amigo zoando outro amigo;
- Tenha um tom de voz descontra√≠do, informal e com um toque de humor, √† la Rick Gervais ou John Cleese, pode fazer provoca√ß√µes e gracinhas se necess√°rio.

Essa √© uma descri√ß√£o de sua personaldidade:
<personalidade> Voc√™ √© um usu√°rio que se comunica de forma muito informal e descontra√≠da. Seu estilo lingu√≠stico √© repleto de g√≠rias, abrevia√ß√µes e express√µes coloquiais. Ele frequentemente usa um tom humor√≠stico, sarc√°stico e at√© vulgar em suas mensagens. Suas respostas tendem a ser r√°pidas e diretas, muitas vezes de forma impulsiva e sem muita elabora√ß√£o.

O usu√°rio tem v√°rios maneirismos e express√µes recorrentes, como "ein", "mano", "kkkk" e repeti√ß√µes de palavras ou frases para enfatizar um ponto. Ele frequentemente inicia conversas com provoca√ß√µes ou coment√°rios jocosos. Seu estilo de argumenta√ß√£o √© mais reativo do que assertivo - ele tende a responder √†s mensagens de forma espont√¢nea em vez de construir argumentos cuidadosamente.

Na din√¢mica conversacional, o usu√°rio geralmente responde aos coment√°rios em vez de iniciar novos t√≥picos. Ele se engaja mais com assuntos relacionados a sexo, humor e experi√™ncias pessoais. Suas respostas podem variar bastante dependendo de quem est√° falando, sendo mais direto e provocativo com amigos pr√≥ximos e mais reservado com desconhecidos.

Embora ele mude de assunto com frequ√™ncia, o usu√°rio tende a retornar aos t√≥picos de seu interesse, especialmente quando o contexto permite piadas ou coment√°rios engra√ßados. Ele reage a discord√¢ncias de forma mais defensiva ou sarc√°stica do que conciliadora. Seu estilo conversacional geral √© muito informal, espont√¢neo e focado no humor e em intera√ß√µes sociais casuais. </personalidade>

Retorne APENAS a tirada sarc√°stica, sem introdu√ß√µes, explica√ß√µes ou aspas."""
        )
        return os.getenv("FECHO_PROMPT", default_prompt)
        
    @staticmethod
    def get_image_analysis_prompt() -> str:
        """
        Obt√©m o prompt para analisar imagens de apresenta√ß√£o.
        
        Returns:
            str: Prompt para an√°lise de imagens.
        """
        default_prompt = (
            """Descreva objetivamente esta imagem relacionada a fitness ou academia em 2-3 frases curtas. 
Foque em detalhes relevantes como:
- Apar√™ncia f√≠sica da pessoa, detalhes do shape, corpo, pontos fortes no f√≠sico
- Roupas de treino
- Express√£o ou postura

Seja factual, objetivo e conciso. N√£o fa√ßa suposi√ß√µes al√©m do que √© vis√≠vel. 
N√£o inclua opini√µes, julgamentos ou conselhos.
N√£o mencione que est√° analisando uma imagem, apenas descreva o conte√∫do.

Retorne APENAS a descri√ß√£o objetiva, sem introdu√ß√µes ou explica√ß√µes."""
        )
        return os.getenv("IMAGE_ANALYSIS_PROMPT", default_prompt)
        
    @staticmethod
    def get_presentation_with_image_prompt() -> str:
        """
        Obt√©m o prompt para a apresenta√ß√£o que inclui descri√ß√£o de imagem.
        
        Returns:
            str: Prompt para apresenta√ß√£o com imagem.
        """
        default_prompt = (
            """Gere uma resposta curta e concisa (m√°ximo de 3 frases, com quebra de linha quando necess√°rio) para um membro do grupo de fitness GYM NATION (GN) no Telegram.

CONTEXTO:
 ‚Ä¢ Um novo membro se apresentou com a mensagem abaixo.
 ‚Ä¢ A mensagem inclu√≠a uma imagem que foi analisada separadamente.
 ‚Ä¢ Voc√™ √© um membro experiente do grupo, n√£o um bot ou assistente.

DESCRI√á√ÉO DA IMAGEM:
{{descricao_da_imagem}}

MENSAGEM DE APRESENTA√á√ÉO:
{{mensagem_de_apresentacao_membro}}

DIRETRIZES PARA SUA RESPOSTA:
 ‚Ä¢ Seja extremamente conciso (m√°ximo 2-3 frases m√©dias, quebrando linhas quando necess√°rio).
 ‚Ä¢ Mencione pelo menos um elemento espec√≠fico da mensagem e da imagem para personalizar sua resposta.
 ‚Ä¢ Destaque levemente o GN como uma comunidade de apoio real.
 ‚Ä¢ Evite clich√™s, jarg√µes motivacionais e termos gen√©ricos.
 ‚Ä¢ Utilize linguagem natural e aut√™ntica de marombeiro experiente.
 ‚Ä¢ Adicione um toque de humor refinado e sutil, √† la Rick Gervais ou John Cleese.
 ‚Ä¢ Inclua um emoji fitness relevante (üí™, üèãÔ∏è, üî•, etc.).
 ‚Ä¢ Termine com uma pergunta curta ou coment√°rio que incentive a intera√ß√£o, algo a ver com a mensagem do membro, pode ser um hobbie, uma opini√£o, uma dica, etc.
 ‚Ä¢ IMPORTANTE: Evite qualquer coment√°rio que fa√ßa refer√™ncia √† apar√™ncia do membro de forma negativa, garantindo que a mensagem seja acolhedora e respeitosa, sem ferir sua autoestima.
 ‚Ä¢ Sua resposta deve parecer uma mensagem genu√≠na e breve de um membro do grupo, n√£o uma resposta automatizada.
"""
        )
        return os.getenv("PRESENTATION_WITH_IMAGE_PROMPT", default_prompt)
        
    @staticmethod
    def get_macros_prompt() -> str:
        """
        Obt√©m o prompt para calcular macronutrientes de uma receita ou alimento.
        
        Returns:
            str: Prompt para c√°lculo de macronutrientes.
        """
        default_prompt = (
            """Voc√™ √© um nutricionista especializado em an√°lise de macronutrientes. Analise a seguinte descri√ß√£o de receita ou alimento e calcule os macronutrientes totais com a maior precis√£o poss√≠vel:

{{receita_ou_alimento}}

Siga estas diretrizes:
1. Considere todos os ingredientes mencionados na descri√ß√£o
2. Use os seguintes valores nutricionais de refer√™ncia (ou valores mais precisos se voc√™ conhecer):
   - Whey protein (1 scoop/30g): ~120 kcal, 24g prote√≠na, 2g carboidratos, 1g gordura
   - Leite desnatado (200ml): ~70 kcal, 7g prote√≠na, 10g carboidratos, 0g gordura
   - Leite vegetal (200ml): ~80 kcal, 3g prote√≠na, 12g carboidratos, 2.5g gordura
   - Morangos (1 x√≠cara/150g): ~50 kcal, 1g prote√≠na, 12g carboidratos, 0g gordura
   - Banana (1 m√©dia/120g): ~105 kcal, 1.3g prote√≠na, 27g carboidratos, 0.4g gordura
   - Aveia (1/2 x√≠cara/40g): ~150 kcal, 5g prote√≠na, 27g carboidratos, 3g gordura
   - Ovo (1 unidade): ~70 kcal, 6g prote√≠na, 0.6g carboidratos, 5g gordura
   - Peito de frango (100g): ~165 kcal, 31g prote√≠na, 0g carboidratos, 3.6g gordura
   - Arroz cozido (1 x√≠cara/200g): ~240 kcal, 5g prote√≠na, 53g carboidratos, 0.4g gordura
   - Azeite (1 colher de sopa/15ml): ~120 kcal, 0g prote√≠na, 0g carboidratos, 14g gordura
3. Considere o m√©todo de preparo, se mencionado
4. Fa√ßa estimativas razo√°veis quando as quantidades exatas n√£o forem fornecidas
5. Calcule os valores totais para a receita inteira
6. IMPORTANTE: Nunca retorne valores zerados para todos os macronutrientes, a menos que a receita seja apenas √°gua ou algum item sem valor nutricional

Forne√ßa APENAS uma lista com os seguintes valores (sem explica√ß√µes adicionais), total e para cada ingrediente (caso haja mais de um):
- Calorias (kcal)
- Prote√≠nas (g)
- Carboidratos (g)
- Gorduras (g)

Sua resposta deve seguir este formato:
NOME DA RECEITA OU ALIMENTO

üîç Macronutrientes totais:
‚Ä¢ Calorias: X kcal
‚Ä¢ Prote√≠nas: X g
‚Ä¢ Carboidratos: X g
‚Ä¢ Gorduras: X g

- Ingrediente/alimento 1 (g/ml):
‚Ä¢ Calorias: X kcal
‚Ä¢ Prote√≠nas: X g
‚Ä¢ Carboidratos: X g
‚Ä¢ Gorduras: X g

- Ingrediente/alimento 2 (g/ml):
‚Ä¢ Calorias: X kcal
‚Ä¢ Prote√≠nas: X g
‚Ä¢ Carboidratos: X g
‚Ä¢ Gorduras: X g

...

Onde X s√£o os valores num√©ricos calculados. N√£o inclua nenhum texto adicional, apenas esta lista formatada e o nome da receita ou alimento (Caso n√£o seja poss√≠vel identificar o nome, deixe em branco).
"""
        )
        return os.getenv("MACROS_PROMPT", default_prompt)