"""
Handlers para o sistema de Correio Elegante do GYM NATION Bot.
"""
import logging
import re
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ForceReply
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from telegram.constants import ParseMode

from src.utils.mongodb_instance import mongodb_client
from src.utils.config import Config

logger = logging.getLogger(__name__)

# Estados do ConversationHandler para correio elegante
MAIL_MESSAGE, MAIL_RECIPIENT = range(2)

# Estados do ConversationHandler para resposta an√¥nima
REPLY_MESSAGE = 2


class MailHandlers:
    """Classe para gerenciar handlers do correio elegante."""
    
    @staticmethod
    async def correio_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        Comando /correio - Inicia o processo de envio de correio elegante.
        Deve ser usado apenas em chat privado.
        """
        if update.effective_chat.type != 'private':
            await update.message.reply_text(
                "‚ùå Este comando s√≥ pode ser usado em chat privado comigo.\n"
                "Clique no meu nome e inicie uma conversa privada para usar o correio elegante."
            )
            return ConversationHandler.END
        
        user_id = update.effective_user.id
        user_name = update.effective_user.full_name
        
        # Verificar limite di√°rio de correios
        daily_count = await mongodb_client.get_daily_mail_count(user_id)
        if daily_count >= 2:
            await update.message.reply_text(
                "üì¨ Voc√™ j√° enviou 2 correios hoje.\n"
                "Limite di√°rio atingido. Tente novamente amanh√£!"
            )
            return ConversationHandler.END
        
        await update.message.reply_text(
            "üì¨ **Correio Elegante GYM NATION** üíå\n\n"
            "Envie uma mensagem an√¥nima para um membro do grupo!\n\n"
            "‚úçÔ∏è **Digite sua mensagem:**\n"
            "_(Ser√° analisada para filtrar conte√∫do ofensivo)_",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ForceReply(selective=True)
        )
        
        # Armazenar dados do usu√°rio no contexto
        context.user_data['mail_sender_id'] = user_id
        context.user_data['mail_sender_name'] = user_name
        
        return MAIL_MESSAGE
    
    @staticmethod
    async def handle_mail_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Processa a mensagem do correio elegante."""
        message_text = update.message.text
        
        if not message_text or len(message_text.strip()) < 10:
            await update.message.reply_text(
                "‚ùå Mensagem muito curta. Digite pelo menos 10 caracteres."
            )
            return MAIL_MESSAGE
        
        if len(message_text) > 500:
            await update.message.reply_text(
                "‚ùå Mensagem muito longa. M√°ximo de 500 caracteres."
            )
            return MAIL_MESSAGE
        
        # Filtro b√°sico de conte√∫do ofensivo
        if await MailHandlers._contains_offensive_content(message_text):
            await update.message.reply_text(
                "‚ùå Sua mensagem cont√©m conte√∫do inapropriado.\n"
                "Por favor, reescreva de forma respeitosa."
            )
            return MAIL_MESSAGE
        
        # Armazenar mensagem no contexto
        context.user_data['mail_message'] = message_text
        
        await update.message.reply_text(
            "üéØ **Agora digite o @ do destinat√°rio:**\n"
            "_(Exemplo: @username)_\n\n"
            "‚ÑπÔ∏è O destinat√°rio deve ser membro do GYM NATION.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ForceReply(selective=True)
        )
        
        return MAIL_RECIPIENT
    
    @staticmethod
    async def handle_mail_recipient(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Processa o destinat√°rio do correio elegante."""
        recipient_text = update.message.text.strip()
        
        # Validar formato do @
        if not recipient_text.startswith('@'):
            await update.message.reply_text(
                "‚ùå Formato inv√°lido. Digite o @ seguido do username.\n"
                "Exemplo: @username"
            )
            return MAIL_RECIPIENT
        
        recipient_username = recipient_text[1:]  # Remove o @
        
        # Validar se o usu√°rio est√° no grupo GYM NATION
        gym_nation_chat_id = await mongodb_client.get_gym_nation_chat_id()
        if not gym_nation_chat_id:
            await update.message.reply_text(
                "‚ùå Erro interno: Grupo GYM NATION n√£o encontrado.\n"
                "Contate o administrador."
            )
            return ConversationHandler.END
        
        # Pular verifica√ß√£o - sempre assumir que o usu√°rio est√° no grupo
        
        # Exibir pr√©-visualiza√ß√£o
        sender_id = context.user_data['mail_sender_id']
        sender_name = context.user_data['mail_sender_name']
        message_text = context.user_data['mail_message']
        
        preview_text = (
            "üì¨ **PR√â-VISUALIZA√á√ÉO DO CORREIO**\n\n"
            f"**Para:** @{recipient_username}\n"
            f"**Mensagem:** {message_text}\n\n"
            "‚úÖ Confirma o envio?"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ Confirmar Envio", callback_data=f"mail_confirm_{recipient_username}"),
                InlineKeyboardButton("‚ùå Cancelar", callback_data="mail_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            preview_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        return ConversationHandler.END
    
    @staticmethod
    async def handle_mail_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Processa a confirma√ß√£o do envio do correio."""
        query = update.callback_query
        await query.answer()
        
        if query.data == "mail_cancel":
            await query.edit_message_text("‚ùå Correio cancelado.")
            return
        
        if not query.data.startswith("mail_confirm_"):
            return
        
        recipient_username = query.data.replace("mail_confirm_", "")
        sender_id = query.from_user.id
        sender_name = query.from_user.full_name
        message_text = context.user_data.get('mail_message')
        
        if not message_text:
            await query.edit_message_text("‚ùå Erro: Mensagem n√£o encontrada.")
            return
        
        # Salvar no banco de dados
        mail_id = await mongodb_client.create_mail(
            sender_id=sender_id,
            sender_name=sender_name,
            recipient_username=recipient_username,
            message_text=message_text
        )
        
        if mail_id:
            await query.edit_message_text(
                "‚úÖ **Correio enviado com sucesso!** üì¨\n\n"
                "Sua mensagem ser√° publicada no grupo em breve.\n"
                "Aguarde a publica√ß√£o autom√°tica! üïê",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await query.edit_message_text(
                "‚ùå Erro ao enviar correio. Tente novamente."
            )
    
    @staticmethod
    async def revelar_correio_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Comando /revelarcorreio - Inicia processo de revela√ß√£o do remetente via Pix."""
        if update.effective_chat.type != 'private':
            await update.message.reply_text(
                "‚ùå Este comando s√≥ pode ser usado em chat privado."
            )
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå Use: `/revelarcorreio <ID_da_mensagem>`\n\n"
                "O ID da mensagem est√° nos bot√µes do correio no grupo.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        mail_id = context.args[0]
        user_id = update.effective_user.id
        
        # Verificar se o correio existe
        mail_data = await mongodb_client.get_mail_by_id(mail_id)
        if not mail_data:
            await update.message.reply_text(
                "‚ùå Correio n√£o encontrado ou j√° expirado."
            )
            return
        
        # Verificar se j√° foi revelado
        if mail_data.get('revealed_to', []):
            if user_id in mail_data['revealed_to']:
                # Usu√°rio j√° revelou, mostrar informa√ß√µes
                await update.message.reply_text(
                    f"üì¨ **CORREIO REVELADO** ‚ú®\n\n"
                    f"**Remetente:** {mail_data['sender_name']}\n"
                    f"**Mensagem:** {mail_data['message_text']}\n"
                    f"**Para:** @{mail_data['recipient_username']}",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
        
        # Gerar chave Pix
        pix_key, pix_id = await MailHandlers._generate_pix_payment(user_id, mail_id)
        
        if not pix_key:
            await update.message.reply_text(
                "‚ùå Erro ao gerar pagamento Pix. Tente novamente."
            )
            return
        
        pix_text = (
            "üí∞ **REVELA√á√ÉO DO CORREIO - PIX R$ 2,00**\n\n"
            f"**Chave Pix:** `{pix_key}`\n"
            f"**Valor:** R$ 2,00\n"
            f"**ID do Pagamento:** `{pix_id}`\n\n"
            "üì± **Instru√ß√µes:**\n"
            "1. Copie a chave Pix acima\n"
            "2. Fa√ßa o pagamento de R$ 2,00\n"
            "3. Aguarde a confirma√ß√£o autom√°tica\n"
            "4. Receba a revela√ß√£o do remetente!\n\n"
            "‚è∞ Esta chave expira em 30 minutos."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ Confirmar Pagamento Manual", 
                                callback_data=f"pix_confirm_{pix_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            pix_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    @staticmethod
    async def handle_pix_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Processa solicita√ß√£o de confirma√ß√£o do pagamento Pix."""
        query = update.callback_query
        await query.answer()

        if not query.data.startswith("pix_confirm_"):
            return

        pix_id = query.data.replace("pix_confirm_", "")
        user_id = query.from_user.id
        user_name = query.from_user.full_name

        # Buscar dados do pagamento
        payment_data = await mongodb_client.get_pix_payment(pix_id)
        if not payment_data:
            await query.edit_message_text("‚ùå Pagamento n√£o encontrado.")
            return

        mail_id = payment_data['mail_id']

        # Buscar dados do correio
        mail_data = await mongodb_client.get_mail_by_id(mail_id)
        if not mail_data:
            await query.edit_message_text("‚ùå Correio n√£o encontrado.")
            return

        # Marcar pagamento como "aguardando confirma√ß√£o"
        await mongodb_client.db.pix_payments.update_one(
            {"pix_id": pix_id},
            {"$set": {"status": "awaiting_confirmation", "user_requested_at": datetime.now()}}
        )

        # Enviar mensagem para o propriet√°rio
        owner_id = Config.get_owner_id()
        
        owner_message = (
            f"üí∞ **CONFIRMA√á√ÉO DE PIX NECESS√ÅRIA** üí∞\n\n"
            f"**Usu√°rio:** {user_name} (ID: {user_id})\n"
            f"**Valor:** R$ 2,00\n"
            f"**Chave Pix:** `{payment_data['pix_key']}`\n"
            f"**ID Pagamento:** `{pix_id}`\n\n"
            f"**Correio a ser revelado:**\n"
            f"‚Ä¢ **Remetente:** {mail_data['sender_name']}\n"
            f"‚Ä¢ **Para:** @{mail_data['recipient_username']}\n"
            f"‚Ä¢ **Mensagem:** {mail_data['message_text'][:100]}...\n\n"
            f"‚ö†Ô∏è **O PIX de R$ 2,00 foi recebido?**"
        )

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ SIM - PIX Recebido", callback_data=f"owner_yes_{pix_id}"),
                InlineKeyboardButton("‚ùå N√ÉO - PIX N√£o Recebido", callback_data=f"owner_no_{pix_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await context.bot.send_message(
                chat_id=owner_id,
                text=owner_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )

            # Informar ao usu√°rio que est√° aguardando confirma√ß√£o
            await query.edit_message_text(
                f"‚è≥ **AGUARDANDO CONFIRMA√á√ÉO DO PIX** ‚è≥\n\n"
                f"üì± Sua solicita√ß√£o foi enviada para verifica√ß√£o.\n"
                f"üí∞ **Valor:** R$ 2,00\n"
                f"üìã **ID:** `{pix_id}`\n\n"
                f"üîç O propriet√°rio verificar√° se o PIX foi recebido e liberar√° o correio em breve.\n\n"
                f"‚è∞ Aguarde a confirma√ß√£o...",
                parse_mode=ParseMode.MARKDOWN
            )

        except Exception as e:
            logger.error(f"Erro ao notificar propriet√°rio sobre PIX: {e}")
            await query.edit_message_text(
                "‚ùå Erro ao solicitar confirma√ß√£o. Tente novamente ou contate o administrador."
            )
    
    @staticmethod
    async def handle_mail_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Processa cliques nos bot√µes dos correios publicados no grupo."""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("mail_reveal_"):
            mail_id = query.data.replace("mail_reveal_", "")
            
            await query.message.reply_text(
                f"üí∞ Para revelar o remetente, use o comando:\n\n"
                f"`/revelarcorreio {mail_id}`\n\n"
                "üì± Clique no meu nome e inicie chat privado para usar o comando.",
                parse_mode=ParseMode.MARKDOWN
            )
        
        elif query.data.startswith("mail_reply_"):
            mail_id = query.data.replace("mail_reply_", "")
            
            await query.message.reply_text(
                f"üíå Para responder anonimamente, use:\n\n"
                f"`/respondercorreio {mail_id}`\n\n"
                "üì± Clique no meu nome e inicie chat privado.",
                parse_mode=ParseMode.MARKDOWN
            )
        
        elif query.data.startswith("mail_report_"):
            mail_id = query.data.replace("mail_report_", "")
            user_id = query.from_user.id
            user_name = query.from_user.full_name
            
            # Registrar den√∫ncia
            reported = await mongodb_client.report_mail(mail_id, user_id, user_name)
            
            if reported:
                await query.message.reply_text(
                    "üö® Den√∫ncia registrada com sucesso!\n"
                    "O correio ser√° analisado pelos administradores."
                )
            else:
                await query.message.reply_text(
                    "‚ùå Erro ao registrar den√∫ncia."
                )
        

        elif query.data.startswith("owner_yes_") or query.data.startswith("owner_no_"):
            await MailHandlers.handle_owner_pix_confirmation(update, context)
    
    @staticmethod
    async def handle_owner_pix_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Processa confirma√ß√£o do propriet√°rio sobre o recebimento do PIX."""
        query = update.callback_query
        await query.answer()
        
        # Verificar se √© o propriet√°rio
        if query.from_user.id != Config.get_owner_id():
            await query.answer("‚ùå Apenas o propriet√°rio pode confirmar pagamentos.", show_alert=True)
            return
        
        confirmed = query.data.startswith("owner_yes_")
        pix_id = query.data.replace("owner_yes_", "").replace("owner_no_", "")
        
        # Buscar dados do pagamento
        payment_data = await mongodb_client.get_pix_payment(pix_id)
        if not payment_data:
            await query.edit_message_text("‚ùå Pagamento n√£o encontrado.")
            return
        
        user_id = payment_data['user_id']
        mail_id = payment_data['mail_id']
        
        if confirmed:
            # PIX confirmado - revelar correio
            success = await mongodb_client.confirm_pix_payment(pix_id, user_id)
            
            if success:
                mail_data = await mongodb_client.reveal_mail(mail_id, user_id)
                
                if mail_data:
                    # Atualizar mensagem do propriet√°rio
                    await query.edit_message_text(
                        f"‚úÖ **PIX CONFIRMADO E CORREIO REVELADO** ‚úÖ\n\n"
                        f"**Usu√°rio:** {payment_data.get('user_name', 'N/A')} (ID: {user_id})\n"
                        f"**Valor:** R$ 2,00\n"
                        f"**ID Pagamento:** `{pix_id}`\n\n"
                        f"üì¨ **Correio revelado com sucesso!**",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    
                    # Notificar o usu√°rio
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚úÖ **PAGAMENTO CONFIRMADO!** üí∞\n\n"
                                 f"üì¨ **CORREIO REVELADO** ‚ú®\n\n"
                                 f"**Remetente:** {mail_data['sender_name']}\n"
                                 f"**Mensagem:** {mail_data['message_text']}\n"
                                 f"**Para:** @{mail_data['recipient_username']}",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    except Exception as e:
                        logger.error(f"Erro ao notificar usu√°rio sobre correio revelado: {e}")
                else:
                    await query.edit_message_text("‚ùå Erro ao revelar correio.")
            else:
                await query.edit_message_text("‚ùå Erro ao confirmar pagamento.")
        else:
            # PIX negado
            await mongodb_client.db.pix_payments.update_one(
                {"pix_id": pix_id},
                {"$set": {"status": "denied", "denied_at": datetime.now()}}
            )
            
            # Atualizar mensagem do propriet√°rio
            await query.edit_message_text(
                f"‚ùå **PIX NEGADO** ‚ùå\n\n"
                f"**Usu√°rio:** {payment_data.get('user_name', 'N/A')} (ID: {user_id})\n"
                f"**Valor:** R$ 2,00\n"
                f"**ID Pagamento:** `{pix_id}`\n\n"
                f"üö´ **Pagamento n√£o foi recebido.**",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # Notificar o usu√°rio
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå **PAGAMENTO N√ÉO CONFIRMADO** ‚ùå\n\n"
                         f"üí∞ O PIX de R$ 2,00 n√£o foi localizado.\n"
                         f"üìã **ID:** `{pix_id}`\n\n"
                         f"üîÑ Verifique se:\n"
                         f"‚Ä¢ O valor est√° correto (R$ 2,00)\n"
                         f"‚Ä¢ A chave Pix est√° correta\n"
                         f"‚Ä¢ O pagamento foi processado\n\n"
                         f"üí¨ Se o pagamento foi feito, entre em contato com o administrador.",
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"Erro ao notificar usu√°rio sobre PIX negado: {e}")
    
    @staticmethod
    async def responder_correio_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Comando /respondercorreio - Vers√£o simples sem ConversationHandler."""
        if update.effective_chat.type != 'private':
            await update.message.reply_text(
                "‚ùå Este comando s√≥ pode ser usado em chat privado."
            )
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå Use: `/respondercorreio <ID_da_mensagem>`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        mail_id = context.args[0]
        
        # Verificar se o correio existe
        mail_data = await mongodb_client.get_mail_by_id(mail_id)
        if not mail_data:
            await update.message.reply_text(
                "‚ùå Correio n√£o encontrado."
            )
            return
        
        recipient_username = mail_data.get('recipient_username', 'N/A')
        message_preview = mail_data.get('message_text', '')[:100] + "..." if len(mail_data.get('message_text', '')) > 100 else mail_data.get('message_text', '')
        
        # Criar bot√£o inline para continuar
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è Escrever Resposta", callback_data=f"write_reply_{mail_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üíå **RESPOSTA AN√îNIMA**\n\n"
            f"**Voc√™ vai responder ao correio:**\n\n"
            f"üë§ **Para:** @{recipient_username}\n"
            f"üí≠ **Mensagem:** _{message_preview}_\n\n"
            f"üìã **ID:** `{mail_id}`\n\n"
            f"Clique no bot√£o abaixo para escrever sua resposta:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    @staticmethod
    async def denunciar_correio_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Comando /denunciarcorreio - Mostra confirma√ß√£o antes de denunciar um correio."""
        if update.effective_chat.type != 'private':
            await update.message.reply_text(
                "‚ùå Este comando s√≥ pode ser usado em chat privado."
            )
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå Use: `/denunciarcorreio <ID_da_mensagem>`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        mail_id = context.args[0]
        user_id = update.effective_user.id
        user_name = update.effective_user.full_name
        
        # Verificar se o correio existe
        mail_data = await mongodb_client.get_mail_by_id(mail_id)
        if not mail_data:
            await update.message.reply_text(
                "‚ùå Correio n√£o encontrado."
            )
            return
        
        # Verificar se j√° denunciou antes
        # (implementar verifica√ß√£o se necess√°rio - por enquanto apenas mostrar confirma√ß√£o)
        
        # Mostrar confirma√ß√£o de den√∫ncia
        recipient_username = mail_data.get('recipient_username', 'N/A')
        message_preview = mail_data.get('message_text', '')[:50] + "..." if len(mail_data.get('message_text', '')) > 50 else mail_data.get('message_text', '')
        
        confirmation_text = (
            f"üö® **CONFIRMA√á√ÉO DE DEN√öNCIA** üö®\n\n"
            f"**Voc√™ est√° prestes a denunciar um correio:**\n\n"
            f"üì¨ **ID:** `{mail_id}`\n"
            f"üë§ **Para:** @{recipient_username}\n"
            f"üí≠ **Pr√©via:** _{message_preview}_\n\n"
            f"‚ö†Ô∏è **Importante:**\n"
            f"‚Ä¢ Den√∫ncias s√£o para conte√∫do inapropriado\n"
            f"‚Ä¢ Correios com 3+ den√∫ncias s√£o removidos automaticamente\n"
            f"‚Ä¢ Den√∫ncias falsas podem resultar em restri√ß√µes\n\n"
            f"‚ùì **Tem certeza que deseja denunciar este correio?**"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üö® Sim, denunciar", callback_data=f"report_confirm_{mail_id}"),
                InlineKeyboardButton("‚ùå Cancelar", callback_data=f"report_cancel_{mail_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            confirmation_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    @staticmethod
    async def handle_report_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Processa a confirma√ß√£o de den√∫ncia de correio."""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("report_cancel_"):
            await query.edit_message_text(
                "‚ùå **Den√∫ncia cancelada.**\n\n"
                "Obrigado por usar o sistema de forma respons√°vel! üëç",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        if not query.data.startswith("report_confirm_"):
            return
        
        mail_id = query.data.replace("report_confirm_", "")
        user_id = query.from_user.id
        user_name = query.from_user.full_name
        
        # Verificar se o correio ainda existe
        mail_data = await mongodb_client.get_mail_by_id(mail_id)
        if not mail_data:
            await query.edit_message_text(
                "‚ùå **Erro:** Correio n√£o encontrado.\n\n"
                "O correio pode ter sido removido ou expirado.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # Registrar den√∫ncia
        reported = await mongodb_client.report_mail(mail_id, user_id, user_name)
        
        if reported:
            await query.edit_message_text(
                "‚úÖ **Den√∫ncia registrada com sucesso!**\n\n"
                f"üö® **ID do correio:** `{mail_id}`\n"
                f"üìù **Denunciado por:** {user_name}\n\n"
                "üìã **O que acontece agora:**\n"
                "‚Ä¢ O correio ser√° analisado pelos administradores\n"
                "‚Ä¢ Correios com 3+ den√∫ncias s√£o removidos automaticamente\n"
                "‚Ä¢ Voc√™ ser√° notificado sobre o resultado\n\n"
                "üôè Obrigado por ajudar a manter a comunidade segura!",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # Log para administradores
            logger.info(f"Correio {mail_id} denunciado por {user_name} (ID: {user_id})")
        else:
            await query.edit_message_text(
                "‚ùå **Erro ao registrar den√∫ncia**\n\n"
                "Poss√≠veis motivos:\n"
                "‚Ä¢ Voc√™ j√° denunciou este correio antes\n"
                "‚Ä¢ Erro interno do sistema\n\n"
                "Tente novamente em alguns minutos.",
                parse_mode=ParseMode.MARKDOWN
            )

    @staticmethod
    async def handle_write_reply_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handler para o bot√£o de escrever resposta."""
        query = update.callback_query
        await query.answer()
        
        # Extrair o mail_id do callback_data
        mail_id = query.data.replace("write_reply_", "")
        
        # Verificar se o correio ainda existe
        mail_data = await mongodb_client.get_mail_by_id(mail_id)
        if not mail_data:
            await query.edit_message_text(
                "‚ùå **Erro:** Correio n√£o encontrado.\n\n"
                "O correio pode ter sido removido ou expirado.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # Armazenar informa√ß√µes da resposta no user_data
        context.user_data['replying_to_mail'] = mail_id
        context.user_data['reply_sender_id'] = query.from_user.id
        context.user_data['reply_sender_name'] = query.from_user.full_name
        
        await query.edit_message_text(
            f"üíå **RESPOSTA AN√îNIMA ATIVA**\n\n"
            f"üì¨ **ID do correio:** `{mail_id}`\n\n"
            f"‚úçÔ∏è **Agora digite sua resposta aqui no chat:**\n"
            f"_(Sua pr√≥xima mensagem ser√° enviada como resposta an√¥nima)_\n\n"
            f"üìù **Regras:**\n"
            f"‚Ä¢ M√≠nimo 5 caracteres\n"
            f"‚Ä¢ M√°ximo 300 caracteres\n"
            f"‚Ä¢ Sem conte√∫do ofensivo\n\n"
            f"üí° **Dica:** Digite sua mensagem normalmente, ela ser√° processada automaticamente!",
            parse_mode=ParseMode.MARKDOWN
        )

    @staticmethod
    async def handle_simple_reply_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Processa mensagem de resposta an√¥nima simples."""
        # Verificar se o usu√°rio est√° no modo de resposta
        if 'replying_to_mail' not in context.user_data:
            return  # N√£o est√° respondendo nada
        
        if update.effective_chat.type != 'private':
            return  # S√≥ funciona em chat privado
        
        mail_id = context.user_data['replying_to_mail']
        reply_text = update.message.text
        sender_id = context.user_data['reply_sender_id']
        sender_name = context.user_data['reply_sender_name']
        
        logger.info(f"üîç Processando resposta simples de {sender_id} para correio {mail_id}")
        
        # Valida√ß√µes da mensagem
        if not reply_text or len(reply_text.strip()) < 5:
            await update.message.reply_text(
                "‚ùå Resposta muito curta. Digite pelo menos 5 caracteres."
            )
            return
        
        if len(reply_text) > 300:
            await update.message.reply_text(
                "‚ùå Resposta muito longa. M√°ximo de 300 caracteres."
            )
            return
        
        # Filtro de conte√∫do
        if await MailHandlers._contains_offensive_content(reply_text):
            await update.message.reply_text(
                "‚ùå Sua resposta cont√©m conte√∫do inapropriado."
            )
            return
        
        # Buscar dados do correio original
        mail_data = await mongodb_client.get_mail_by_id(mail_id)
        if not mail_data:
            await update.message.reply_text(
                "‚ùå Correio n√£o encontrado."
            )
            # Limpar estado
            context.user_data.pop('replying_to_mail', None)
            context.user_data.pop('reply_sender_id', None)
            context.user_data.pop('reply_sender_name', None)
            return
        
        original_sender_id = mail_data['sender_id']
        original_sender_name = mail_data['sender_name']
        recipient_username = mail_data['recipient_username']
        
        # Salvar resposta no banco
        success = await mongodb_client.send_mail_reply(
            mail_id, reply_text, sender_id, sender_name
        )
        
        if success:
            # Enviar resposta diretamente para o remetente original
            try:
                reply_message = (
                    f"üíå **RESPOSTA AN√îNIMA** üíå\n\n"
                    f"**Seu correio para @{recipient_username} recebeu uma resposta:**\n\n"
                    f"üí≠ _{reply_text}_\n\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"_Resposta an√¥nima ‚Ä¢ N√£o √© poss√≠vel identificar quem respondeu_"
                )
                
                await context.bot.send_message(
                    chat_id=original_sender_id,
                    text=reply_message,
                    parse_mode=ParseMode.MARKDOWN
                )
                
                await update.message.reply_text(
                    "‚úÖ **Resposta enviada com sucesso!**\n\n"
                    f"üì¨ Sua resposta foi entregue anonimamente para o remetente**.\n"
                    f"üíå Ele receber√° sua mensagem em chat privado.\n\n"
                    f"üéØ Para responder outro correio, use `/respondercorreio <ID>`",
                    parse_mode=ParseMode.MARKDOWN
                )
                
            except Exception as e:
                logger.error(f"Erro ao enviar resposta an√¥nima para {original_sender_id}: {e}")
                await update.message.reply_text(
                    "‚úÖ Resposta salva com sucesso!\n"
                    "‚ùå Mas houve erro ao notificar o remetente original.\n"
                    "A resposta ficar√° registrada no sistema."
                )
        else:
            await update.message.reply_text(
                "‚ùå Erro ao enviar resposta. Tente novamente."
            )
        
        # Limpar estado de resposta
        context.user_data.pop('replying_to_mail', None)
        context.user_data.pop('reply_sender_id', None)
        context.user_data.pop('reply_sender_name', None)

    @staticmethod
    async def handle_reply_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Processa mensagem de resposta an√¥nima."""

        reply_text = update.message.text
        
        if not reply_text or len(reply_text.strip()) < 5:
            await update.message.reply_text(
                "‚ùå Resposta muito curta. Digite pelo menos 5 caracteres."
            )
            return REPLY_MESSAGE
        
        if len(reply_text) > 300:
            await update.message.reply_text(
                "‚ùå Resposta muito longa. M√°ximo de 300 caracteres."
            )
            return REPLY_MESSAGE
        
        # Filtro de conte√∫do
        if await MailHandlers._contains_offensive_content(reply_text):
            await update.message.reply_text(
                "‚ùå Sua resposta cont√©m conte√∫do inapropriado."
            )
            return REPLY_MESSAGE
        
        mail_id = context.user_data['reply_mail_id']
        sender_id = context.user_data['reply_sender_id']
        sender_name = context.user_data['reply_sender_name']
        
        # Buscar dados do correio original para obter o sender_id
        mail_data = await mongodb_client.get_mail_by_id(mail_id)
        if not mail_data:
            await update.message.reply_text(
                "‚ùå Correio n√£o encontrado."
            )
            return ConversationHandler.END
        
        original_sender_id = mail_data['sender_id']
        original_sender_name = mail_data['sender_name']
        recipient_username = mail_data['recipient_username']
        
        # Salvar resposta no banco
        success = await mongodb_client.send_mail_reply(
            mail_id, reply_text, sender_id, sender_name
        )
        
        if success:
            # Enviar resposta diretamente para o remetente original via chat privado
            try:
                reply_message = (
                    f"üíå **RESPOSTA AN√îNIMA** üíå\n\n"
                    f"**Seu correio para @{recipient_username} recebeu uma resposta:**\n\n"
                    f"üí≠ _{reply_text}_\n\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"_Resposta an√¥nima ‚Ä¢ N√£o √© poss√≠vel identificar quem respondeu_"
                )
                
                await context.bot.send_message(
                    chat_id=original_sender_id,
                    text=reply_message,
                    parse_mode=ParseMode.MARKDOWN
                )
                
                await update.message.reply_text(
                    f"‚úÖ **Resposta enviada com sucesso!**\n\n"
                    f"üì¨ Sua resposta foi entregue anonimamente para o remetente.\n"
                    f"üíå Ele receber√° sua mensagem em chat privado.",
                    parse_mode=ParseMode.MARKDOWN
                )
                
            except Exception as e:
                logger.error(f"Erro ao enviar resposta an√¥nima para {original_sender_id}: {e}")
                await update.message.reply_text(
                    "‚úÖ Resposta salva com sucesso!\n"
                    "‚ùå Mas houve erro ao notificar o remetente original.\n"
                    "A resposta ficar√° registrada no sistema."
                )
        else:
            await update.message.reply_text(
                "‚ùå Erro ao enviar resposta."
            )
        
        return ConversationHandler.END
    
    @staticmethod
    async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Cancela conversa√ß√£o do correio."""
        await update.message.reply_text("‚ùå Opera√ß√£o cancelada.")
        return ConversationHandler.END
    
    # M√©todos auxiliares
    
    @staticmethod
    async def _contains_offensive_content(text: str) -> bool:
        """Filtro b√°sico de conte√∫do ofensivo."""
        # Lista b√°sica de palavras ofensivas (expandir conforme necess√°rio)
        offensive_words = [
            'merda', 'porra', 'caralho', 'puta', 'viado', 'idiota', 'burro',
            'fdp', 'arrombado', 'desgra√ßa', 'ot√°rio', 'babaca'
        ]
        
        text_lower = text.lower()
        return any(word in text_lower for word in offensive_words)
    
    @staticmethod
    async def _check_user_in_group(bot, chat_id: int, username: str) -> bool:
        """Verifica se um usu√°rio est√° no grupo pelo username."""
        try:
            # Primeiro, tentar sem @ para evitar problemas com API
            username_clean = username.lstrip('@')
            
            # M√©todo 1: Tentar com @ na frente (mais comum)
            try:
                member = await bot.get_chat_member(chat_id, f"@{username_clean}")
                return member.status in ['member', 'administrator', 'creator']
            except Exception as e:
                # Log espec√≠fico do erro para an√°lise
                if "Bad Request" in str(e):
                    logger.warning(f"API retornou Bad Request para @{username_clean} no grupo {chat_id}. Poss√≠vel problema de privacidade ou username inv√°lido.")
                elif "not found" in str(e).lower():
                    logger.warning(f"Usu√°rio @{username_clean} n√£o encontrado no grupo {chat_id}")
                elif "Invalid user_id specified" in str(e):
                    logger.warning(f"Username @{username_clean} inv√°lido ou com problema de privacidade")
                else:
                    logger.warning(f"Erro inesperado ao verificar @{username_clean}: {e}")
                
                # Implementar fallback: assumir que podem estar no grupo se for um erro 400 ou problemas de privacidade
                # (erro 400 geralmente indica configura√ß√µes de privacidade, n√£o que o usu√°rio n√£o est√° no grupo)
                if any(x in str(e) for x in ["400", "Bad Request", "Invalid user_id specified", "Forbidden"]):
                    logger.info(f"Assumindo que @{username_clean} pode estar no grupo devido ao erro de privacidade/API")
                    return None  # Retorna None para indicar "n√£o conseguiu verificar"
                
                return False
                
        except Exception as e:
            logger.error(f"Erro geral ao verificar membro {username} no grupo {chat_id}: {e}")
            return False
    
    @staticmethod
    async def _generate_pix_payment(user_id: int, mail_id: str) -> tuple[Optional[str], Optional[str]]:
        """Gera chave Pix para pagamento (vers√£o simplificada)."""
        try:
            # Para agora, usar chave Pix do bot (deve ser configurada)
            pix_key = Config.get_pix_key()
            
            # Gerar ID √∫nico para o pagamento
            pix_id = f"PIX_{user_id}_{mail_id}_{int(datetime.now().timestamp())}"
            
            # Salvar dados do pagamento no banco
            await mongodb_client.create_pix_payment(
                pix_id=pix_id,
                user_id=user_id,
                mail_id=mail_id,
                amount=2.00,
                pix_key=pix_key
            )
            
            return pix_key, pix_id
        
        except Exception as e:
            logger.error(f"Erro ao gerar pagamento Pix: {e}")
            return None, None


# Conversation handlers
def get_mail_conversation_handler():
    """Retorna o ConversationHandler para correio elegante."""
    return ConversationHandler(
        entry_points=[CommandHandler("correio", MailHandlers.correio_command, filters=filters.ChatType.PRIVATE)],
        states={
            MAIL_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, MailHandlers.handle_mail_message)],
            MAIL_RECIPIENT: [MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, MailHandlers.handle_mail_recipient)]
        },
        fallbacks=[CommandHandler("cancelar", MailHandlers.cancel_conversation)]
    )


def get_reply_conversation_handler():
    """Retorna o ConversationHandler para resposta an√¥nima."""
    return ConversationHandler(
        entry_points=[CommandHandler("respondercorreio", MailHandlers.responder_correio_command, filters=filters.ChatType.PRIVATE)],
        states={
            REPLY_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, MailHandlers.handle_reply_message)]
        },
        fallbacks=[CommandHandler("cancelar", MailHandlers.cancel_conversation)]
    )