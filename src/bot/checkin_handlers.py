"""
Handlers para os comandos de check-in.
"""
import logging
from typing import Optional, Dict, Any
from telegram import Update, ReactionTypeEmoji
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from telegram.error import TimedOut
from src.utils.mongodb_instance import mongodb_client
from src.bot.handlers import is_admin, send_temporary_message, delete_message_after
import asyncio
from datetime import datetime, timedelta

# Configura√ß√£o de logging
logger = logging.getLogger(__name__)

async def checkin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para o comando /checkin (pontua√ß√£o padr√£o = 1).
    Define uma mensagem como √¢ncora de check-in.
    
    Args:
        update (Update): Objeto de atualiza√ß√£o do Telegram.
        context (ContextTypes.DEFAULT_TYPE): Contexto do callback.
    """
    await set_anchor(update, context, points_value=1)

async def checkinplus_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para o comando /checkinplus (pontua√ß√£o dobrada = 2).
    Define uma mensagem como √¢ncora de check-in especial.
    
    Args:
        update (Update): Objeto de atualiza√ß√£o do Telegram.
        context (ContextTypes.DEFAULT_TYPE): Contexto do callback.
    """
    await set_anchor(update, context, points_value=2)

async def set_anchor(update: Update, context: ContextTypes.DEFAULT_TYPE, points_value: int) -> None:
    """
    L√≥gica comum para definir uma mensagem como √¢ncora de check-in com pontua√ß√£o espec√≠fica.
    
    Args:
        update (Update): Objeto de atualiza√ß√£o do Telegram.
        context (ContextTypes.DEFAULT_TYPE): Contexto do callback.
        points_value (int): Valor da pontua√ß√£o associada √† √¢ncora.
    """
    # Verifica se o usu√°rio √© administrador
    if not await is_admin(update, context):
        await send_temporary_message(
            update, 
            context, 
            "Apenas propriet√°rio e administradores podem usar este comando."
        )
        return
    
    # Verifica se o comando foi usado como resposta a outra mensagem
    if not update.message.reply_to_message:
        await send_temporary_message(
            update, 
            context, 
            "Por favor, use este comando respondendo √† mensagem que deseja definir como √¢ncora de check-in."
        )
        return
    
    # Obt√©m os IDs do chat e da mensagem
    chat_id = update.effective_chat.id
    message_id = update.message.reply_to_message.message_id
    
    # Define a mensagem como √¢ncora de check-in com a pontua√ß√£o especificada
    success = await mongodb_client.set_checkin_anchor(chat_id, message_id, points_value)
    
    if success:
        # Tenta deletar a mensagem de comando
        try:
            await update.message.delete()
        except Exception as e:
            logger.error(f"Erro ao deletar mensagem de comando /checkin ou /checkinplus: {e}")
        
        # Envia mensagem de confirma√ß√£o
        confirmation_text = (
            f"‚úÖ Check-in PLUS ativado (pontos x{points_value})! Membros podem responder √† mensagem marcada para registrar." 
            if points_value > 1 
            else "‚úÖ Check-in padr√£o ativado! Membros podem responder √† mensagem marcada para registrar."
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text=confirmation_text,
            reply_to_message_id=message_id
        )
    else:
        await send_temporary_message(
            update, 
            context, 
            f"‚ùå Erro ao ativar o check-in (pontos x{points_value}). Por favor, tente novamente."
        )

async def endcheckin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para o comando /endcheckin.
    Desativa o check-in atual.
    
    Args:
        update (Update): Objeto de atualiza√ß√£o do Telegram.
        context (ContextTypes.DEFAULT_TYPE): Contexto do callback.
    """
    # Verifica se o usu√°rio √© administrador
    if not await is_admin(update, context):
        await send_temporary_message(
            update, 
            context, 
            "Apenas propriet√°rio e administradores podem usar este comando."
        )
        return
    
    # Obt√©m o ID do chat
    chat_id = update.effective_chat.id
    
    # Obt√©m o check-in ativo antes de desativ√°-lo
    active_checkin = await mongodb_client.get_active_checkin(chat_id)
    
    if not active_checkin:
        await send_temporary_message(
            update, 
            context, 
            "N√£o h√° check-in ativo para desativar."
        )
        return
    
    # Obt√©m a contagem de check-ins (n√∫mero de participa√ß√µes) para a √¢ncora ativa
    anchor_id = active_checkin["_id"]
    checkin_count = await mongodb_client.get_anchor_checkin_count(chat_id, anchor_id)
    points_value = active_checkin.get("points_value", 1)
    anchor_type = "PLUS" if points_value > 1 else "padr√£o"
    
    # Desativa o check-in atual
    success = await mongodb_client.end_checkin(chat_id)
    
    if success:
        # Tenta deletar a mensagem de comando
        try:
            await update.message.delete()
        except Exception as e:
            logger.error(f"Erro ao deletar mensagem de comando: {e}")
        
        # Envia mensagem de confirma√ß√£o com a contagem de check-ins
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ Check-in {anchor_type} finalizado! Foram registrados {checkin_count} check-ins."
        )
    else:
        await send_temporary_message(
            update, 
            context, 
            "‚ùå Erro ao desativar o check-in. Por favor, tente novamente."
        )

async def handle_checkin_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para respostas a mensagens de check-in (com m√≠dia).
    Processa check-ins normais e PLUS, calcula pontos e gera respostas.
    
    Args:
        update (Update): Objeto de atualiza√ß√£o do Telegram.
        context (ContextTypes.DEFAULT_TYPE): Contexto do callback.
    """
    # Se a mensagem n√£o for uma resposta, retorna
    if not update.message.reply_to_message:
        return
    
    # Verifica se a mensagem cont√©m m√≠dia (foto, v√≠deo, GIF, etc.)
    if not (update.message.photo or update.message.video or 
            update.message.animation or 
            (update.message.document and update.message.document.mime_type and 
             update.message.document.mime_type.startswith('image/'))):
        logger.debug(f"Mensagem de check-in sem m√≠dia ignorada: {update.message.message_id}")
        return
    
    # Obt√©m o chat_id e o replied_message_id
    chat_id = update.effective_chat.id
    replied_message_id = update.message.reply_to_message.message_id
    
    # Obt√©m o check-in ativo
    active_checkin = await mongodb_client.get_active_checkin(chat_id)
    
    # Se n√£o houver check-in ativo ou a resposta n√£o for para a √¢ncora, retorna
    if not active_checkin or active_checkin["message_id"] != replied_message_id:
        # Log a raz√£o espec√≠fica
        if not active_checkin:
            logger.debug(f"Ignorando resposta {update.message.message_id}: Nenhum check-in ativo no chat {chat_id}")
        else:
            logger.debug(f"Ignorando resposta {update.message.message_id}: N√£o √© para a √¢ncora ativa {active_checkin['message_id']}. Respondeu a {replied_message_id}")
        return
    
    logger.info(f"Check-in (resposta c/ m√≠dia) detectado de {update.effective_user.full_name} ({update.effective_user.id}) no chat {chat_id} para √¢ncora {active_checkin['_id']}")
    
    # Obt√©m informa√ß√µes do usu√°rio
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name or "Usu√°rio"
    username = update.effective_user.username  # Captura o username
    user_message_text = update.message.text or update.message.caption # Pega texto da mensagem ou legenda da m√≠dia
    
    # Tenta registrar o check-in do usu√°rio para esta √¢ncora
    # Retorna o NOVO SCORE TOTAL do usu√°rio se sucesso, None se j√° fez check-in para esta √¢ncora
    new_total_score = await mongodb_client.record_user_checkin(chat_id, user_id, user_name, username)
    
    # Se o usu√°rio j√° fez check-in para esta √¢ncora espec√≠fica, envia aviso e retorna
    if new_total_score is None:
        logger.debug(f"Usu√°rio {user_id} j√° fez check-in para esta √¢ncora {active_checkin['_id']}")
        display_name = f"@{username}" if username else user_name
        await send_temporary_message(
            update, 
            context, 
            f"Ei {display_name}, j√° contabilizamos seu check-in hoje üòâ"
        )
        return
    
    # Check-in registrado com sucesso!
    logger.info(f"Check-in registrado com sucesso para {user_id}. Novo score total: {new_total_score}")
    
    # Determina a rea√ß√£o e prepara a mensagem de resposta
    points_value = active_checkin.get("points_value", 1)
    is_plus_checkin = points_value > 1
    llm_response_text = None
    reaction = "üî•" # Rea√ß√£o padr√£o
    
    # Obter cliente Anthropic do contexto
    anthropic_client = context.bot_data.get("anthropic_client")
    
    if is_plus_checkin:
        reaction = "üî•" # Rea√ß√£o para check-in plus (Testando com polegar)
        # Tenta gerar resposta da LLM se houver texto e o cliente existir
        if user_message_text and anthropic_client:
            try:
                # Passa o texto da mensagem do usu√°rio para a LLM
                llm_response_text = await anthropic_client.generate_checkin_response(user_message_text, user_name)
                if not llm_response_text:
                    logger.warning(f"LLM n√£o retornou resposta para check-in plus de {user_id}")
            except Exception as e:
                logger.error(f"Erro ao gerar resposta da LLM para check-in plus: {e}")
                # Continua sem a resposta da LLM em caso de erro
        elif user_message_text and not anthropic_client:
            logger.warning("Cliente Anthropic n√£o encontrado no bot_data. N√£o √© poss√≠vel gerar resposta LLM para check-in plus.")

    # Adiciona a rea√ß√£o apropriada
    try:
        # Garante que a rea√ß√£o √© uma string v√°lida antes de enviar
        if reaction not in ["üî•"]:
            logger.error(f"Tentativa de usar rea√ß√£o inv√°lida: {reaction}. Usando padr√£o üî•.")
            reaction = "üî•"
            
        # Cria o objeto ReactionTypeEmoji explicitamente
        reaction_object = ReactionTypeEmoji(emoji=reaction)
        
        logger.debug(f"Tentando definir rea√ß√£o '{reaction}' (como objeto ReactionTypeEmoji) para mensagem {update.message.message_id} no chat {chat_id}")
        await context.bot.set_message_reaction(
            chat_id=chat_id,
            message_id=update.message.message_id,
            reaction=[reaction_object] # Passando o objeto expl√≠cito
        )
    except Exception as e:
        logger.error(f"Erro ao adicionar rea√ß√£o {reaction} √† mensagem {update.message.message_id}: {e}")
    
    # Monta a mensagem de resposta final
    display_name = f"@{username}" if username else user_name
    base_response = f"Check-in {'PLUS' if is_plus_checkin else ''} confirmado, {display_name}! {reaction}" 
    score_info = f"Voc√™ tem <b>{new_total_score}</b> pontos no total!"
    
    # Adiciona a resposta da LLM se for check-in plus e a resposta foi gerada
    if is_plus_checkin and llm_response_text:
        final_response = f"{llm_response_text}\n\n{base_response} {score_info}"
    else:
        # Para check-in normal ou plus sem texto/erro LLM, usa a resposta padr√£o antiga (mas com score)
        # A fun√ß√£o generate_checkin_response_static √© a antiga generate_checkin_response renomeada
        static_part = generate_checkin_response_static(display_name, new_total_score) # Usa o score atualizado
        # Extrai a parte inicial da mensagem est√°tica (antes da pontua√ß√£o)
        static_base = static_part.split("Voc√™ tem")[0].strip()
        final_response = f"{static_base}"
        
    # Responde ao usu√°rio com a mensagem final
    await update.message.reply_text(final_response, parse_mode=ParseMode.HTML)

async def checkinscore_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para o comando /checkinscore.
    Envia um scoreboard com os scores de check-ins dos usu√°rios, agrupado por pontua√ß√£o e com estat√≠sticas.
    
    Args:
        update (Update): Objeto de atualiza√ß√£o do Telegram.
        context (ContextTypes.DEFAULT_TYPE): Contexto do callback.
    """
    # Determina o chat para o qual exibir o scoreboard
    chat_id = update.effective_chat.id
    chat_title = "Check-ins"
    
    # Verifica se um nome de grupo foi fornecido como argumento
    if context.args and len(context.args) > 0:
        target_group_name = ' '.join(context.args)
        target_chat_info = await mongodb_client.get_chat_info_by_title(target_group_name)
        
        if target_chat_info:
            chat_id = target_chat_info["chat_id"]
            # Usa o t√≠tulo encontrado no DB para o cabe√ßalho
            chat_title = target_chat_info.get("title", target_group_name) 
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"N√£o foi poss√≠vel encontrar informa√ß√µes do grupo '{target_group_name}'. Verifique o nome ou se o bot est√° no grupo."
            )
            return
    elif update.effective_chat.type != "private":
        # Se for em grupo, usa o t√≠tulo do grupo atual
        chat_title = update.effective_chat.title
    else:
        # Se for privado sem args, n√£o podemos mostrar scoreboard
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"Use /checkinscore <nome_do_grupo> para ver o placar de um grupo espec√≠fico."
        )
        return

    # Tenta deletar a mensagem de comando
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"Erro ao deletar mensagem de comando /checkinscore: {e}")
    
    # --- Obten√ß√£o e Processamento dos Dados ---
    
    # 1. Obt√©m o scoreboard de check-ins (ordenado por score)
    scoreboard_data = await mongodb_client.get_checkin_scoreboard(chat_id)
    
    if not scoreboard_data or len(scoreboard_data) == 0:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"Ainda n√£o h√° check-ins registrados {f'no grupo {chat_title}' if chat_title else 'neste chat'}. üò¢"
        )
        return
        
    # 2. Busca estat√≠sticas adicionais
    total_participants = await mongodb_client.get_total_checkin_participants(chat_id)
    first_checkin_date_obj = await mongodb_client.get_first_checkin_date(chat_id)
    
    # Calcula h√° quantos dias foi o primeiro check-in
    days_since_first = "N/A"
    if first_checkin_date_obj:
        # Garante que ambos s√£o offset-naive ou offset-aware antes de subtrair
        now_naive = datetime.now() 
        if first_checkin_date_obj.tzinfo:
             first_checkin_naive = first_checkin_date_obj.replace(tzinfo=None)
        else:
             first_checkin_naive = first_checkin_date_obj
        
        delta = now_naive - first_checkin_naive
        days_since_first = f"{delta.days} dias atr√°s" if delta.days > 0 else ("Hoje" if delta.days == 0 else "Data futura?")
    
    # 3. Calcula o total de pontos do grupo
    total_group_score = sum(entry.get("score", 0) for entry in scoreboard_data)

    # 4. Agrupa usu√°rios por score
    grouped_scores = {}
    for entry in scoreboard_data:
        score = entry.get("score", 0)
        if score not in grouped_scores:
            grouped_scores[score] = []
        # Armazena nome e username para exibi√ß√£o
        user_info = {
            "name": entry.get("user_name", f"User {entry['user_id']}"),
            "username": entry.get("username")
        }
        grouped_scores[score].append(user_info)
        
    # --- Montagem da Mensagem --- 
    
    scoreboard_lines = []
    # Adiciona t√≠tulo
    scoreboard_lines.append(f"üèÜ <b>{chat_title.upper()} CHECK-INS</b> üèÜ\n") 
    
    rank_icons = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    current_rank_pos = 0 # Posi√ß√£o no ranking (1, 2, 3...)
    processed_users_count = 0 # Conta usu√°rios j√° exibidos
    max_users_to_show = 20 # Limite de usu√°rios para exibir

    # Itera sobre os scores √∫nicos ordenados
    for score_value in sorted(grouped_scores.keys(), reverse=True):
        if processed_users_count >= max_users_to_show:
            break # Sai se j√° exibiu o m√°ximo de usu√°rios
            
        users_at_this_score = grouped_scores[score_value]
        current_rank_pos += 1
        
        rank_display = rank_icons.get(current_rank_pos, f"üîπ {current_rank_pos}.")
        plural = "s" if score_value != 1 else ""
        
        # Linha do Rank e Pontua√ß√£o
        scoreboard_lines.append(f"{rank_display} (<b>{score_value}</b> check-in{plural})")
        
        # Lista usu√°rios neste rank
        for user_info in users_at_this_score:
            if processed_users_count >= max_users_to_show:
                scoreboard_lines.append("   ...") # Indica que h√° mais usu√°rios n√£o listados
                break # Sai do loop interno tamb√©m
                
            # Formata nome/username
            name = user_info['name']
            username = user_info['username']
            # Limita o tamanho do nome para evitar quebra de linha (ajuste conforme necess√°rio)
            max_name_len = 25 
            display_name = f"@{username}" if username else name
            if len(display_name) > max_name_len:
                display_name = display_name[:max_name_len-1] + "‚Ä¶"
                
            scoreboard_lines.append(f"   üë§ {display_name}")
            processed_users_count += 1
            
        if processed_users_count >= max_users_to_show and current_rank_pos < len(grouped_scores):
             if not scoreboard_lines[-1].strip().endswith("..."):
                  scoreboard_lines.append("   ...") # Garante que o ... apare√ßa se cortou no meio de um rank
             break # Sai do loop externo se atingiu o limite

        scoreboard_lines.append("") # Linha em branco entre os ranks

    # Remove a √∫ltima linha em branco se existir
    if scoreboard_lines and scoreboard_lines[-1] == "":
        scoreboard_lines.pop()
        
    # Adiciona linha motivacional
    scoreboard_lines.append("\nüí™ Continue mantendo a consist√™ncia! üî•")
    
    # Adiciona se√ß√£o de estat√≠sticas
    scoreboard_lines.append("\nüìä <b>Estat√≠sticas:</b>")
    scoreboard_lines.append(f"‚Ä¢ {total_participants} pessoas j√° participaram")
    plural_stats = "s" if total_group_score != 1 else ""
    scoreboard_lines.append(f"‚Ä¢ {total_group_score} check-in{plural_stats} no total")
    scoreboard_lines.append(f"‚Ä¢ Primeiro check-in: {days_since_first}")

    # Junta tudo em uma √∫nica string
    scoreboard_message = "\n".join(scoreboard_lines)

    # --- Envio da Mensagem --- 
    try:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text=scoreboard_message, 
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True # Evita preview de links em usernames
        )
    except TimedOut:
        logger.warning(f"Timeout ao enviar scoreboard para o chat {chat_id}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text="Ocorreu um timeout ao gerar o placar. Tente novamente mais tarde.",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"Erro ao enviar scoreboard para chat {chat_id}: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text="Ocorreu um erro ao gerar o placar. Tente novamente mais tarde.",
            disable_web_page_preview=True
        )

def generate_checkin_response_static(user_name: str, checkin_count: int) -> str:
    """
    Gera uma mensagem de resposta EST√ÅTICA padr√£o para check-in, baseada no score total.
    (Renomeada da antiga generate_checkin_response para clareza).
    NOTA: checkin_count aqui √© o SCORE TOTAL atual do usu√°rio.
    """
    # Lista expandida de respostas alinhadas com a personalidade do Bro Bot
    responses = [
        # Score 1-5: Iniciante
        f"√â isso a√≠, {user_name}! Come√ßou com tudo! üí™ Bora que o shape vem!",
        f"A√≠ sim, {user_name}! Primeiro passo dado. O resto √© s√≥ continuar! üî•",
        f"Boa, {user_name}! Check-in na conta. A dor de hoje √© o shape de amanh√£! üòâ",
        f"Mandou bem, {user_name}! O sof√° chorou hoje! üòÇ Check-in feito!",
        f"Check-in registrado, {user_name}! Continua assim que voc√™ chega l√°! üöÄ",

        # Score 6-15: Consist√™ncia Inicial
        f"Segunda semana firme, {user_name}? Isso √© que √© foco! Check-in! ‚ú®",
        f"{user_name} marcando presen√ßa de novo! A consist√™ncia t√° falando alto! üîë",
        f"Dale, {user_name}! N√£o falha uma! Check-in pra conta! üòé",
        f"J√° virou rotina pra {user_name}! Check-in confirmado! üíØ",
        f"√â a tropa do shape em a√ß√£o! Boa, {user_name}! ‚úÖ",

        # Score 16-30: H√°bito Formado
        f"A√≠ eu dou valor, {user_name}! Disciplina t√° afiada! Check-in! üëä",
        f"{user_name} mostrando pra que veio! Mais um check-in pra conta! üí•",
        f"O shape t√° agradecendo, {user_name}! Check-in com sucesso! ‚ú®",
        f"Que exemplo, {user_name}! Check-in registrado! Continua voando! ‚úàÔ∏è",
        f"Isso n√£o √© mais treino, √© estilo de vida! Boa, {user_name}! üèÜ",

        # Score 31-50: Veterano
        f"{user_name}, voc√™ j√° √© praticamente um patrim√¥nio da GYM NATION! Check-in! üèõÔ∏è",
        f"Mais um pra conta do veterano {user_name}! Inspira√ß√£o pura! üî•",
        f"Algu√©m chama o bombeiro? Porque {user_name} t√° pegando fogo! Check-in! üöí",
        f"Esse {user_name} n√£o brinca em servi√ßo! Check-in n√≠vel hard! ü¶æ",
        f"Com essa dedica√ß√£o, {user_name}, at√© o espelho t√° aplaudindo! Check-in! üëè",

        # Score 51+: Lenda
        f"{user_name}, uma lenda n√£o tira f√©rias! Check-in √©pico! ü•á",
        f"Mais de 50 check-ins?! {user_name}, voc√™ zerou o game! üí™üëë",
        f"O Olimpo te espera, {user_name}! Check-in de respeito! ‚ú®‚ö°Ô∏è",
        f"Se existisse um Hall da Fama do check-in, {user_name} j√° teria est√°tua! üóø",
        f"Check-in registrado! {user_name}, sua disciplina √© lend√°ria! üìú",
    ]
    # Usa uma l√≥gica simples para variar a resposta baseada no score
    # Garante que checkin_count √© um inteiro >= 0
    safe_checkin_count = max(0, int(checkin_count))
    # Escolhe a mensagem baseada no score total usando m√≥dulo do tamanho da lista
    chosen_response = responses[safe_checkin_count % len(responses)]
    # Adiciona a contagem de pontos no final
    return f"{chosen_response}\nSeu score total √© <b>{checkin_count}</b>!"

async def confirmcheckin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para o comando /confirmcheckin.
    Confirma manualmente o check-in de um usu√°rio na √¢ncora ativa.
    
    Args:
        update (Update): Objeto de atualiza√ß√£o do Telegram.
        context (ContextTypes.DEFAULT_TYPE): Contexto do callback.
    """
    # Verifica se o usu√°rio √© administrador
    if not await is_admin(update, context):
        await send_temporary_message(
            update, 
            context, 
            "Apenas propriet√°rio e administradores podem usar este comando."
        )
        return

    chat_id = update.effective_chat.id
    target_user_id = None
    target_user_name = "Usu√°rio"
    target_username = None

    # Verifica se o comando foi usado em resposta a uma mensagem
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_user_id = target_user.id
        target_user_name = target_user.full_name
        target_username = target_user.username
    # Verifica se um ID de usu√°rio foi fornecido como argumento
    elif context.args and len(context.args) >= 1 and context.args[0].isdigit():
        target_user_id = int(context.args[0])
        # Tenta obter informa√ß√µes do usu√°rio pelo ID (pode falhar se o bot n√£o viu o usu√°rio recentemente)
        try:
            member = await context.bot.get_chat_member(chat_id, target_user_id)
            target_user_name = member.user.full_name
            target_username = member.user.username
        except Exception as e:
            logger.warning(f"N√£o foi poss√≠vel obter info para user_id {target_user_id} em confirmcheckin: {e}")
            target_user_name = f"Usu√°rio {target_user_id}" # Usa ID se nome n√£o encontrado
    else:
        await send_temporary_message(
            update,
            context,
            "Use /confirmcheckin respondendo a uma mensagem do usu√°rio ou com o ID do usu√°rio. Ex: /confirmcheckin 123456789"
        )
        return

    if target_user_id:
        # Tenta confirmar o check-in manualmente
        new_total_score = await mongodb_client.confirm_manual_checkin(
            chat_id, target_user_id, target_user_name, target_username
        )

        # Tenta deletar a mensagem de comando
        try:
            await update.message.delete()
        except Exception as e:
            logger.error(f"Erro ao deletar mensagem de comando /confirmcheckin: {e}")

        if new_total_score is not None:
            display_name = f"@{target_username}" if target_username else target_user_name
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ Check-in manual confirmado para {display_name}! Novo score total: <b>{new_total_score}</b> pontos.",
                parse_mode=ParseMode.HTML
            )
        else:
            # Mensagem se j√° fez check-in ou erro
            display_name = f"@{target_username}" if target_username else target_user_name
            active_checkin = await mongodb_client.get_active_checkin(chat_id)
            if active_checkin:
                # Verifica se o erro foi por j√° ter feito check-in
                existing = await mongodb_client.db.user_checkins.find_one({
                    "chat_id": chat_id,
                    "user_id": target_user_id,
                    "anchor_id": active_checkin['_id']
                })
                if existing:
                    msg = f"‚ö†Ô∏è {display_name} j√° possui check-in registrado para a √¢ncora atual."
                else:
                    msg = f"‚ùå Ocorreu um erro ao tentar confirmar o check-in para {display_name}."
                await context.bot.send_message(chat_id=chat_id, text=msg)
            else:
                 await context.bot.send_message(
                     chat_id=chat_id,
                     text=f"‚ùå N√£o h√° check-in ativo para confirmar manualmente."
                 ) 