"""
Mensagens utilizadas pelo bot.
"""
import random
from typing import Optional
from src.utils.config import Config
from src.bot.motivation import get_random_motivation
from src.utils.anthropic_client import AnthropicClient
import asyncio
import logging

logger = logging.getLogger(__name__)

class Messages:
    """Classe para gerenciar mensagens do bot."""
    
    # Lista de emojis positivos para rea√ß√µes
    POSITIVE_REACTION_EMOJIS = [
        "‚ù§", "üî•", "üëè", "üéâ", "ü§©", "ü•∞"
    ]
    
    @staticmethod
    def get_welcome_message(user_name: str) -> str:
        """
        Obt√©m a mensagem de boas-vindas personalizada com o nome do usu√°rio.
        
        Args:
            user_name (str): Nome do usu√°rio que entrou no grupo.
            
        Returns:
            str: Mensagem de boas-vindas personalizada.
        """
        base_message = Config.get_welcome_message()
        
        # Adiciona o nome do usu√°rio √† mensagem
        personalized_message = f"Ol√°, {user_name}! {base_message}"
        
        return personalized_message
    
    @staticmethod
    def get_random_motivation_message() -> str:
        """
        Obt√©m uma mensagem de motiva√ß√£o fitness aleat√≥ria da lista fixa.
        
        Returns:
            str: Mensagem de motiva√ß√£o.
        """
        return get_random_motivation()
    
    @staticmethod
    def get_start_message() -> str:
        """
        Obt√©m a mensagem de in√≠cio do bot.
        
        Returns:
            str: Mensagem de in√≠cio.
        """
        return (
            "üèãÔ∏è‚Äç‚ôÇÔ∏è *Bem-vindo ao GYM NATION Bot!* üèãÔ∏è‚Äç‚ôÄÔ∏è\n\n"
            "Sou seu assistente virtual para ajudar com sua jornada fitness.\n\n"
            "Use /help para ver todos os comandos dispon√≠veis."
        )
    
    @staticmethod
    def get_help_message() -> str:
        """
        Obt√©m a mensagem de ajuda com os comandos dispon√≠veis.
        
        Returns:
            str: Mensagem de ajuda.
        """
        return (
            "ü§ñ *Comandos do GYM NATION Bot* ü§ñ\n\n"
            "‚Ä¢ /start - Inicia o bot\n"
            "‚Ä¢ /help - Mostra esta mensagem de ajuda\n"
            "‚Ä¢ /motivacao - Receba uma mensagem motivacional\n"
            "‚Ä¢ /apresentacao - Gera uma apresenta√ß√£o personalizada\n"
            "‚Ä¢ /checkin - Inicia um check-in (apenas admins)\n"
            "‚Ä¢ /endcheckin - Encerra um check-in ativo (apenas admins)\n"
            "‚Ä¢ /checkinscore - Mostra o placar de check-ins\n"
            "‚Ä¢ /confirmcheckin - Confirma check-in de um usu√°rio (apenas admins)\n"
            "‚Ä¢ /macros - Calcula macronutrientes de um alimento\n"
            "‚Ä¢ /monitor - Inicia monitoramento de mensagens (apenas dono do bot)\n"
            "‚Ä¢ /unmonitor - Encerra monitoramento de mensagens (apenas dono do bot)\n"
        )
    
    @staticmethod
    async def get_motivation_message_async(user_name: Optional[str] = None, message_content: Optional[str] = None) -> str:
        """
        Obt√©m uma mensagem de motiva√ß√£o fitness gerada pela API da Anthropic,
        opcionalmente personalizada para um usu√°rio espec√≠fico e considerando o
        conte√∫do da mensagem √† qual est√° respondendo.
        
        Args:
            user_name (Optional[str]): Nome do usu√°rio para personalizar a mensagem.
            message_content (Optional[str]): Conte√∫do da mensagem a ser considerada para personaliza√ß√£o.
            
        Returns:
            str: Mensagem de motiva√ß√£o.
        """
        try:
            # Cria um cliente da Anthropic com a chave da API
            client = AnthropicClient(Config.get_anthropic_api_key())
            
            # Obt√©m o prompt para a motiva√ß√£o
            prompt = Config.get_motivation_prompt()
            
            # Se um nome de usu√°rio foi fornecido, personaliza o prompt
            if user_name:
                if message_content:
                    # Inclui o conte√∫do da mensagem para personalizar ainda mais a resposta
                    prompt = f"Crie uma √∫nica frase motivacional curta e impactante sobre fitness, muscula√ß√£o ou vida saud√°vel direcionada para {user_name}, considerando a mensagem: '{message_content}'. A frase deve ser personalizada para este usu√°rio espec√≠fico e relacionada ao conte√∫do da mensagem.\n\nSIGA AS INSTRU√á√ïES:\n{prompt}"
                else:
                    prompt = f"Crie uma √∫nica frase motivacional curta e impactante sobre fitness, muscula√ß√£o ou vida saud√°vel direcionada para {user_name}. A frase deve ser personalizada para este usu√°rio espec√≠fico.\n\nSIGA AS INSTRU√á√ïES:\n{prompt}"
            
            # Gera a resposta (com limite de 150 tokens para garantir uma resposta curta)
            response = await client.generate_response(prompt, "", max_tokens=150)
            
            return response.strip()
        except Exception as e:
            # Em caso de erro, retorna uma mensagem de motiva√ß√£o da lista fixa
            base_message = Messages.get_random_motivation_message()
            if user_name:
                return f"{user_name}, {base_message.lower()}"
            return base_message
    
    @staticmethod
    async def get_fecho_message_async(user_name: Optional[str] = None, message_content: Optional[str] = None) -> str:
        """
        Obt√©m uma tirada sarc√°stica e debochada gerada pela API da Anthropic,
        opcionalmente personalizada para um usu√°rio espec√≠fico e considerando o
        conte√∫do da mensagem √† qual est√° respondendo.
        
        Args:
            user_name (Optional[str]): Nome do usu√°rio para personalizar a tirada.
            message_content (Optional[str]): Conte√∫do da mensagem a ser considerada para personaliza√ß√£o.
            
        Returns:
            str: Tirada sarc√°stica.
        """
        try:
            # Cria um cliente da Anthropic com a chave da API
            client = AnthropicClient(Config.get_anthropic_api_key())
            
            # Obt√©m o prompt para a tirada sarc√°stica
            prompt = Config.get_fecho_prompt()
            
            # Se um nome de usu√°rio foi fornecido, personaliza o prompt
            if user_name:
                if message_content:
                    # Inclui o conte√∫do da mensagem para personalizar ainda mais a resposta
                    prompt = f"Crie uma √∫nica tirada sarc√°stica e debochada com humor direcionada para {user_name}, considerando a mensagem: '{message_content}'. A tirada deve ser personalizada para este usu√°rio espec√≠fico e fazer uma piada relacionada ao conte√∫do da mensagem.\n\nSIGA AS INSTRU√á√ïES:\n{prompt}"
                else:
                    prompt = f"Crie uma √∫nica tirada sarc√°stica e debochada com humor direcionada para {user_name}. A tirada deve ser personalizada para este usu√°rio espec√≠fico.\n\nSIGA AS INSTRU√á√ïES:\n{prompt}"
            
            # Gera a resposta (com limite de 150 tokens para garantir uma resposta curta)
            response = await client.generate_response(prompt, "", max_tokens=150)
            
            return response.strip()
        except Exception as e:
            # Em caso de erro, retorna uma tirada sarc√°stica gen√©rica
            fallback_messages = [
                "üòÇ Essa foi t√£o boa que at√© a IA travou de tanto rir!",
                "ü§£ N√£o consegui processar tamanha genialidade, tente de novo!",
                "üòÖ Meu detector de piadas quebrou com essa mensagem!",
                "üòÜ T√£o engra√ßado que at√© meus circuitos deram tilt!",
                "üôÑ Acho que vou precisar de um upgrade para entender essa...",
                "ü§¶‚Äç‚ôÇÔ∏è At√© eu, uma IA, fiquei sem palavras com essa!"
            ]
            base_message = random.choice(fallback_messages)
            if user_name:
                return f"{user_name}, {base_message}"
            return base_message
    
    @staticmethod
    async def get_motivation_message() -> str:
        """
        Obt√©m uma mensagem de motiva√ß√£o fitness gerada pela API da Anthropic.
        
        Returns:
            str: Mensagem de motiva√ß√£o.
        """
        return await Messages.get_motivation_message_async()
    
    @staticmethod
    def get_random_positive_emoji() -> str:
        """
        Obt√©m um emoji positivo aleat√≥rio para rea√ß√µes.
        
        Returns:
            str: Emoji positivo aleat√≥rio.
        """
        return random.choice(Messages.POSITIVE_REACTION_EMOJIS)
    
    @staticmethod
    async def get_presentation_response(message_content: str, image_data: Optional[bytes] = None, image_mime_type: Optional[str] = None) -> str:
        """
        Obt√©m uma resposta personalizada para uma mensagem de apresenta√ß√£o.
        
        Args:
            message_content (str): Conte√∫do da mensagem de apresenta√ß√£o.
            image_data (Optional[bytes]): Dados bin√°rios da imagem, se houver.
            image_mime_type (Optional[str]): Tipo MIME da imagem (ex: "image/jpeg").
            
        Returns:
            str: Resposta personalizada.
        """
        try:
            # Cria um cliente da Anthropic com a chave da API
            client = AnthropicClient(Config.get_anthropic_api_key())
            
            # Se n√£o houver imagem, usa o fluxo normal
            if not image_data or not image_mime_type:
                # Obt√©m o prompt para a apresenta√ß√£o
                prompt = Config.get_presentation_prompt()
                
                # Gera a resposta
                response = await client.generate_response(
                    prompt_template=prompt, 
                    message_content=message_content,
                    max_tokens=200  # Limita o tamanho da resposta
                )
                
                return response
            
            # Se houver imagem, primeiro analisa a imagem separadamente
            try:
                # Obt√©m o prompt para an√°lise de imagem
                image_analysis_prompt = Config.get_image_analysis_prompt()
                
                # Gera a an√°lise da imagem
                image_description = await client.generate_response(
                    prompt_template=image_analysis_prompt,
                    message_content="",
                    image_data=image_data,
                    image_mime_type=image_mime_type,
                    max_tokens=150  # Limita o tamanho da descri√ß√£o
                )
                
                # Obt√©m o prompt para apresenta√ß√£o com imagem
                presentation_with_image_prompt = Config.get_presentation_with_image_prompt()
                
                # Substitui os placeholders no prompt
                prompt_with_description = presentation_with_image_prompt.replace(
                    "{{descricao_da_imagem}}", image_description
                )
                
                # Substitui tamb√©m o placeholder da mensagem de apresenta√ß√£o
                prompt_with_description = prompt_with_description.replace(
                    "{{mensagem_de_apresentacao_membro}}", message_content
                )
                
                # Gera a resposta final usando o prompt completo
                response = await client.generate_response(
                    prompt_template=prompt_with_description,
                    message_content="",  # J√° substitu√≠mos o placeholder manualmente
                    max_tokens=200  # Limita o tamanho da resposta
                )
                
                return response
                
            except Exception as e:
                # Se falhar na an√°lise da imagem, tenta apenas com o texto
                prompt = Config.get_presentation_prompt()
                response = await client.generate_response(
                    prompt_template=prompt, 
                    message_content=message_content,
                    max_tokens=200  # Limita o tamanho da resposta
                )
                return response
                
        except Exception as e:
            # Em caso de erro, retorna uma mensagem gen√©rica
            return f"Bem-vindo ao GYM NATION! Obrigado por se apresentar. üí™"
    
    @staticmethod
    async def get_macros_calculation(food_description: str) -> str:
        """
        Calcula os macronutrientes de uma receita ou alimento usando a API da Anthropic.
        
        Args:
            food_description (str): Descri√ß√£o da receita ou alimento.
            
        Returns:
            str: C√°lculo de macronutrientes formatado.
            
        Raises:
            Exception: Se ocorrer um erro ao gerar a resposta.
        """
        try:
            # Cria um cliente da Anthropic com a chave da API
            client = AnthropicClient(Config.get_anthropic_api_key())
            
            # Obt√©m o prompt para o c√°lculo de macronutrientes
            prompt = Config.get_macros_prompt()
            
            # Cria uma tarefa para gerar a resposta
            generate_task = asyncio.create_task(client.generate_response(
                prompt_template=prompt,
                message_content=food_description,
                max_tokens=5000  # Aumenta ainda mais o limite para garantir c√°lculos precisos
            ))
            
            # Aguarda a resposta com timeout de 30 segundos
            try:
                response = await asyncio.wait_for(generate_task, timeout=30.0)
                
                # Adiciona o disclaimer no final da resposta
                disclaimer = "\n\n‚ö†Ô∏è Nota: Estes valores s√£o estimativas calculadas por IA e podem n√£o refletir os valores nutricionais reais."
                
                return response.strip() + disclaimer
            except asyncio.TimeoutError:
                # Em caso de timeout, cancela a tarefa e informa o usu√°rio
                generate_task.cancel()
                logger.error("Timeout ao calcular macronutrientes via API Anthropic")
                raise Exception("Tempo limite excedido ao calcular macronutrientes. Por favor, tente novamente.")
        except Exception as e:
            # Em caso de erro, retorna uma mensagem de erro
            logger.error(f"Erro ao calcular macronutrientes: {e}")
            raise Exception(f"Erro ao calcular macronutrientes: {e}") 