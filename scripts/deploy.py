#!/usr/bin/env python3
"""
Script para facilitar o deploy do bot em Docker.

Uso:
    python scripts/deploy.py [--prod] [--build] [--migrate]

Op√ß√µes:
    --prod     Usa o docker-compose.prod.yml (apenas Atlas)
    --build    For√ßa rebuild da imagem Docker
    --migrate  Executa migra√ß√£o dos dados antes do deploy
"""

import os
import sys
import subprocess
import argparse
from typing import List

def run_command(command: List[str], description: str = None) -> bool:
    """
    Executa um comando e retorna se foi bem-sucedido.
    
    Args:
        command: Lista com o comando a ser executado
        description: Descri√ß√£o do que o comando faz
        
    Returns:
        bool: True se o comando foi bem-sucedido
    """
    if description:
        print(f"\nüîÑ {description}...")
    
    try:
        result = subprocess.run(command, check=True, capture_output=True, text=True, encoding='utf-8', errors='replace')
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"ERRO - Erro ao executar comando: {' '.join(command)}")
        print(f"C√≥digo de sa√≠da: {e.returncode}")
        if e.stderr:
            print(f"Erro: {e.stderr}")
        return False

def check_env_file():
    """Verifica se o arquivo .env existe."""
    if not os.path.exists('.env'):
        print("ERRO - Arquivo .env n√£o encontrado!")
        print("Copie o .env.example e configure suas vari√°veis:")
        print("   cp .env.example .env")
        return False
    return True

def check_docker():
    """Verifica se o Docker est√° instalado e rodando."""
    if not run_command(['docker', '--version'], "Verificando Docker"):
        print("‚ùå Docker n√£o est√° instalado ou dispon√≠vel")
        return False
    
    if not run_command(['docker', 'info'], "Verificando se Docker est√° rodando"):
        print("‚ùå Docker n√£o est√° rodando")
        return False
    
    return True

def check_docker_compose():
    """Verifica se o docker-compose est√° dispon√≠vel."""
    # Tenta primeiro docker compose (novo)
    if run_command(['docker', 'compose', 'version'], "Verificando Docker Compose"):
        return 'docker compose'
    
    # Tenta docker-compose (legado)
    if run_command(['docker-compose', '--version'], "Verificando docker-compose"):
        return 'docker-compose'
    
    print("‚ùå Docker Compose n√£o est√° dispon√≠vel")
    return None

def migrate_data():
    """Executa a migra√ß√£o dos dados."""
    print("\nüì¶ Executando migra√ß√£o dos dados...")
    
    # Verifica se as vari√°veis de migra√ß√£o est√£o definidas
    from dotenv import load_dotenv
    load_dotenv()
    
    if not os.getenv("MONGODB_LOCAL_CONNECTION_STRING"):
        print("‚ùå MONGODB_LOCAL_CONNECTION_STRING n√£o definida no .env")
        return False
    
    if not os.getenv("MONGODB_ATLAS_CONNECTION_STRING"):
        print("‚ùå MONGODB_ATLAS_CONNECTION_STRING n√£o definida no .env")
        return False
    
    # Executa a migra√ß√£o
    return run_command([
        sys.executable, 'scripts/migrate_to_atlas.py'
    ], "Migrando dados para MongoDB Atlas")

def build_image(compose_cmd: str, compose_file: str = None):
    """Constr√≥i a imagem Docker."""
    cmd = compose_cmd.split()
    if compose_file:
        cmd.extend(['-f', compose_file])
    cmd.append('build')
    
    return run_command(cmd, "Construindo imagem Docker")

def deploy_bot(compose_cmd: str, compose_file: str = None, build: bool = False):
    """Faz o deploy do bot."""
    cmd_base = compose_cmd.split()
    if compose_file:
        cmd_base.extend(['-f', compose_file])
    
    # Para o servi√ßo se estiver rodando
    print("\nüõë Parando servi√ßos existentes...")
    run_command(cmd_base + ['down'], "Parando servi√ßos")
    
    # Constr√≥i se solicitado
    if build:
        if not build_image(compose_cmd, compose_file):
            return False
    
    # Inicia os servi√ßos
    return run_command(cmd_base + ['up', '-d'], "Iniciando servi√ßos")

def show_status(compose_cmd: str, compose_file: str = None):
    """Mostra o status dos containers."""
    cmd = compose_cmd.split()
    if compose_file:
        cmd.extend(['-f', compose_file])
    cmd.append('ps')
    
    run_command(cmd, "Status dos containers")

def show_logs(compose_cmd: str, compose_file: str = None):
    """Mostra os logs do bot."""
    cmd = compose_cmd.split()
    if compose_file:
        cmd.extend(['-f', compose_file])
    cmd.extend(['logs', '-f', '--tail=50', 'gym-nation-bot'])
    
    print("\nüìã Logs do bot (Ctrl+C para sair):")
    try:
        subprocess.run(cmd)
    except KeyboardInterrupt:
        print("\n‚úã Logs interrompidos")

def main():
    """Fun√ß√£o principal."""
    parser = argparse.ArgumentParser(description="Deploy do Gym Nation Bot")
    parser.add_argument('--prod', action='store_true', 
                       help='Usa configura√ß√£o de produ√ß√£o (apenas Atlas)')
    parser.add_argument('--build', action='store_true',
                       help='For√ßa rebuild da imagem Docker')
    parser.add_argument('--migrate', action='store_true',
                       help='Executa migra√ß√£o dos dados antes do deploy')
    parser.add_argument('--logs', action='store_true',
                       help='Mostra os logs ap√≥s o deploy')
    parser.add_argument('--status', action='store_true',
                       help='Apenas mostra o status dos containers')
    
    args = parser.parse_args()
    
    print("ü§ñ Deploy do Gym Nation Bot")
    print("=" * 40)
    
    # Verifica√ß√µes preliminares
    if not check_env_file():
        sys.exit(1)
    
    if not check_docker():
        sys.exit(1)
    
    compose_cmd = check_docker_compose()
    if not compose_cmd:
        sys.exit(1)
    
    # Define arquivo de compose
    compose_file = 'docker-compose.prod.yml' if args.prod else 'docker-compose.yml'
    
    print(f"\nüìã Configura√ß√£o:")
    print(f"   Modo: {'Produ√ß√£o' if args.prod else 'Desenvolvimento'}")
    print(f"   Arquivo: {compose_file}")
    print(f"   Build: {'Sim' if args.build else 'N√£o'}")
    print(f"   Migra√ß√£o: {'Sim' if args.migrate else 'N√£o'}")
    
    # Apenas status
    if args.status:
        show_status(compose_cmd, compose_file)
        return
    
    # Executa migra√ß√£o se solicitado
    if args.migrate:
        if not migrate_data():
            print("‚ùå Migra√ß√£o falhou!")
            sys.exit(1)
        print("‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
    
    # Faz o deploy
    if not deploy_bot(compose_cmd, compose_file, args.build):
        print("‚ùå Deploy falhou!")
        sys.exit(1)
    
    print("\n‚úÖ Deploy conclu√≠do com sucesso!")
    
    # Mostra status
    show_status(compose_cmd, compose_file)
    
    # Mostra logs se solicitado
    if args.logs:
        show_logs(compose_cmd, compose_file)
    else:
        print(f"\nüí° Para ver os logs: python scripts/deploy.py --logs")
        print(f"üí° Para verificar status: python scripts/deploy.py --status")

if __name__ == "__main__":
    main() 