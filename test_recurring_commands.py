"""
Script para testar os comandos de mensagens recorrentes.
"""
import asyncio
import logging
from datetime import datetime
from unittest.mock import AsyncMock, MagicMock, patch
import re

from telegram import Update, Message, Chat, User
from telegram.ext import ContextTypes, Application

from src.bot.handlers import (
    sayrecurrent_command,
    listrecurrent_command,
    delrecurrent_command
)
from src.utils.mongodb_instance import initialize_mongodb
from src.utils.recurring_messages_manager import initialize_recurring_messages_manager

# Configura√ß√£o de logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def test_recurring_commands():
    """Testa os comandos de mensagens recorrentes."""
    try:
        # Inicializa a conex√£o com o MongoDB
        logger.info("Conectando ao MongoDB...")
        await initialize_mongodb()
        logger.info("Conex√£o com o MongoDB estabelecida com sucesso.")
        
        # Cria mocks para os objetos Update e Context
        update = MagicMock(spec=Update)
        update.effective_chat = MagicMock()
        update.effective_chat.id = 123456789
        update.effective_chat.type = "private"  # Simula um chat privado para simplificar o teste
        update.effective_user = MagicMock(spec=User)
        update.effective_user.id = 987654321
        update.effective_user.full_name = "Usu√°rio de Teste"
        update.effective_user.username = "usuario_teste"
        update.message = MagicMock(spec=Message)
        update.message.chat = MagicMock(spec=Chat)
        update.message.chat.id = 123456789
        update.message.from_user = update.effective_user
        update.message.delete = AsyncMock()
        update.message.reply_text = AsyncMock()
        
        context = MagicMock(spec=ContextTypes.DEFAULT_TYPE)
        context.bot = MagicMock()
        context.bot.send_message = AsyncMock()
        context.bot.get_chat_member = AsyncMock()
        
        # Inicializa o gerenciador de mensagens recorrentes
        app = MagicMock(spec=Application)
        app.bot = context.bot
        recurring_messages_manager = initialize_recurring_messages_manager(app)
        await recurring_messages_manager.start()
        
        # Simula a verifica√ß√£o de administrador
        with patch('src.bot.handlers.is_admin', return_value=True):
            # Testa o comando /sayrecurrent
            logger.info("Testando o comando /sayrecurrent...")
            update.message.text = "/sayrecurrent 12 Esta √© uma mensagem recorrente de teste"
            await sayrecurrent_command(update, context)
            
            # Verifica se a mensagem foi enviada
            if context.bot.send_message.called:
                call_args = context.bot.send_message.call_args[1]
                message_text = call_args['text']
                logger.info(f"Mensagem enviada: {message_text}")
                
                # Extrai o ID da mensagem usando regex
                # O padr√£o √©: üÜî *ID:* `ID_AQUI`
                match = re.search(r'üÜî \*ID:\* `([^`]+)`', message_text)
                if match:
                    message_id = match.group(1)
                    logger.info(f"Mensagem recorrente adicionada com ID: {message_id}")
                else:
                    # Tenta outro padr√£o
                    match = re.search(r'ID:\s*`([^`]+)`', message_text)
                    if match:
                        message_id = match.group(1)
                        logger.info(f"Mensagem recorrente adicionada com ID: {message_id}")
                    else:
                        logger.warning("N√£o foi poss√≠vel extrair o ID da mensagem")
                        logger.warning(f"Texto da mensagem: {message_text}")
                        return
            else:
                logger.warning("A mensagem n√£o foi enviada")
                return
            
            # Testa o comando /listrecurrent
            logger.info("Testando o comando /listrecurrent...")
            update.message.text = "/listrecurrent"
            await listrecurrent_command(update, context)
            
            # Verifica se a lista foi enviada
            if context.bot.send_message.call_count > 1:
                call_args = context.bot.send_message.call_args[1]
                logger.info(f"Lista de mensagens recorrentes: {call_args['text']}")
            else:
                logger.warning("A lista n√£o foi enviada")
            
            # Testa o comando /delrecurrent
            logger.info("Testando o comando /delrecurrent...")
            update.message.text = f"/delrecurrent {message_id}"
            await delrecurrent_command(update, context)
            
            # Verifica se a mensagem de confirma√ß√£o foi enviada
            if context.bot.send_message.call_count > 2:
                call_args = context.bot.send_message.call_args[1]
                logger.info(f"Resultado da desativa√ß√£o: {call_args['text']}")
            else:
                logger.warning("A mensagem de confirma√ß√£o n√£o foi enviada")
            
            # Testa o comando /listrecurrent novamente para verificar se a mensagem foi desativada
            logger.info("Testando o comando /listrecurrent novamente...")
            update.message.text = "/listrecurrent"
            context.bot.send_message.reset_mock()
            update.message.reply_text.reset_mock()
            await listrecurrent_command(update, context)
            
            # Verifica se a lista est√° vazia
            if update.message.reply_text.called:
                call_args = update.message.reply_text.call_args[0]
                logger.info(f"Resultado da listagem ap√≥s desativa√ß√£o: {call_args[0]}")
            elif context.bot.send_message.called:
                call_args = context.bot.send_message.call_args[1]
                logger.info(f"Resultado da listagem ap√≥s desativa√ß√£o: {call_args['text']}")
            else:
                logger.warning("Nenhuma mensagem foi enviada")
        
        # Para o gerenciador de mensagens recorrentes
        await recurring_messages_manager.stop()
        
        logger.info("Teste conclu√≠do com sucesso!")
        
    except Exception as e:
        logger.error(f"Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_recurring_commands()) 